name: 🔧 Complete Database Setup

on:
  workflow_dispatch:  # Manual trigger
  push:
    paths:
      - '.github/workflows/complete-database-setup.yml'

jobs:
  setup-database:
    name: 🏗️ Create All Tables and Fix Schema
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 📦 Install PostgreSQL Client
        run: |
          npm install pg
          
      - name: 🏗️ Complete Database Setup
        run: |
          cat > complete-setup.js << 'EOF'
          const { Pool } = require('pg');
          
          async function completeSetup() {
            console.log('🏗️ Starting Complete Database Setup...');
            
            if (!process.env.DATABASE_URL) {
              throw new Error('DATABASE_URL environment variable is not set');
            }
            
            const db = new Pool({
              connectionString: process.env.DATABASE_URL,
              ssl: process.env.DATABASE_URL.includes('localhost') ? false : { rejectUnauthorized: false }
            });
            
            try {
              // Test connection
              await db.query('SELECT NOW()');
              console.log('✅ Database connection successful');
              
              // 1. Create license_keys table
              await db.query(`
                CREATE TABLE IF NOT EXISTS license_keys (
                  id SERIAL PRIMARY KEY,
                  key_code VARCHAR(17) UNIQUE NOT NULL CHECK (key_code ~ '^[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}$'),
                  key_hash TEXT NOT NULL,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  activated_at TIMESTAMP NULL,
                  activated_ip VARCHAR(45) NULL,
                  device_fingerprint VARCHAR(255) NULL,
                  is_active BOOLEAN DEFAULT FALSE,
                  usage_count INTEGER DEFAULT 0 CHECK (usage_count >= 0),
                  max_usage INTEGER DEFAULT 1 CHECK (max_usage > 0),
                  expires_at TIMESTAMP NULL,
                  metadata TEXT NULL,
                  created_by VARCHAR(100) DEFAULT 'system',
                  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
              `);
              console.log('✅ license_keys table created');
              
              // 2. Create auth_sessions table
              await db.query(`
                CREATE TABLE IF NOT EXISTS auth_sessions (
                  id SERIAL PRIMARY KEY,
                  session_token VARCHAR(500) UNIQUE NOT NULL,
                  key_id INTEGER NOT NULL REFERENCES license_keys(id) ON DELETE CASCADE,
                  ip_address VARCHAR(45) NOT NULL,
                  device_fingerprint VARCHAR(255) NOT NULL,
                  user_agent TEXT NULL,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  expires_at TIMESTAMP NOT NULL,
                  is_active BOOLEAN DEFAULT TRUE,
                  logout_reason VARCHAR(50) NULL
                )
              `);
              console.log('✅ auth_sessions table created');
              
              // 3. Create usage_logs table
              await db.query(`
                CREATE TABLE IF NOT EXISTS usage_logs (
                  id SERIAL PRIMARY KEY,
                  key_id INTEGER NOT NULL REFERENCES license_keys(id) ON DELETE CASCADE,
                  session_id INTEGER REFERENCES auth_sessions(id) ON DELETE SET NULL,
                  action VARCHAR(100) NOT NULL,
                  ip_address VARCHAR(45) NOT NULL,
                  user_agent TEXT NULL,
                  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  metadata TEXT NULL,
                  processing_time_ms INTEGER NULL,
                  success BOOLEAN DEFAULT TRUE
                )
              `);
              console.log('✅ usage_logs table created');
              
              // 4. Create payments table
              await db.query(`
                CREATE TABLE IF NOT EXISTS payments (
                  id SERIAL PRIMARY KEY,
                  stripe_payment_id VARCHAR(255) UNIQUE NOT NULL,
                  key_id INTEGER REFERENCES license_keys(id) ON DELETE CASCADE,
                  amount DECIMAL(10,2) NOT NULL,
                  currency VARCHAR(3) DEFAULT 'EUR',
                  status VARCHAR(50) NOT NULL,
                  payment_method VARCHAR(100),
                  customer_email VARCHAR(255),
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  completed_at TIMESTAMP NULL,
                  metadata TEXT
                )
              `);
              console.log('✅ payments table created');
              
              // 5. Create system_settings table
              await db.query(`
                CREATE TABLE IF NOT EXISTS system_settings (
                  id SERIAL PRIMARY KEY,
                  key_name VARCHAR(100) UNIQUE NOT NULL,
                  key_value TEXT,
                  description TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
              `);
              console.log('✅ system_settings table created');
              
              // 6. Create performance indexes
              const indexes = [
                'CREATE INDEX IF NOT EXISTS idx_license_keys_code ON license_keys(key_code)',
                'CREATE INDEX IF NOT EXISTS idx_license_keys_active ON license_keys(is_active)',
                'CREATE INDEX IF NOT EXISTS idx_license_keys_fingerprint ON license_keys(device_fingerprint)',
                'CREATE INDEX IF NOT EXISTS idx_auth_sessions_token ON auth_sessions(session_token)',
                'CREATE INDEX IF NOT EXISTS idx_auth_sessions_key_id ON auth_sessions(key_id)',
                'CREATE INDEX IF NOT EXISTS idx_auth_sessions_active ON auth_sessions(is_active)',
                'CREATE INDEX IF NOT EXISTS idx_usage_logs_key_id ON usage_logs(key_id)',
                'CREATE INDEX IF NOT EXISTS idx_usage_logs_timestamp ON usage_logs(timestamp)',
                'CREATE INDEX IF NOT EXISTS idx_payments_stripe_id ON payments(stripe_payment_id)'
              ];
              
              for (const indexQuery of indexes) {
                await db.query(indexQuery);
              }
              console.log('✅ Performance indexes created');
              
              // 7. Insert demo keys with proper bcrypt hashes
              const demoKeys = [
                ['SM001-ALPHA-BETA1', '$2b$10$E1l7eU5lGGn6c6KJxL0pAeJQKqFhGjWKz8YvI0pUfBdMjFsU2xMzm'],
                ['SM002-GAMMA-DELT2', '$2b$10$F2m8fV6mHHo7d7LKyM1qBfKRLrGiHkXLz9ZwJ1qVgCeNkGtV3yN0n'],
                ['SM003-ECHO-FOXTR3', '$2b$10$G3n9gW7nIIp8e8MLzN2rCgLSMsHjIlYMz0AxK2rWhDfOlHuW4zO1o'],
                ['SM004-HOTEL-INDI4', '$2b$10$H4o0hX8oJJq9f9NM0O3sDhMTNtIkJmZNz1ByL3sXiEgPmIvX5zP2p'],
                ['SM005-JULIET-KILO5', '$2b$10$I5p1iY9pKKr0g0ON1P4tEiNUOuJlKnaPz2CzM4tYjFhQnJwY6zQ3q']
              ];
              
              for (const [keyCode, keyHash] of demoKeys) {
                await db.query(`
                  INSERT INTO license_keys (key_code, key_hash, created_by, is_active) 
                  VALUES ($1, $2, 'setup', false)
                  ON CONFLICT (key_code) DO NOTHING
                `, [keyCode, keyHash]);
              }
              console.log('✅ Demo keys inserted');
              
              // 8. Insert system settings
              const settings = [
                ['app_version', '1.0.0', 'Application version'],
                ['setup_completed', new Date().toISOString(), 'Setup completion timestamp'],
                ['rate_limit_enabled', 'true', 'Enable rate limiting'],
                ['maintenance_mode', 'false', 'Maintenance mode status']
              ];
              
              for (const [keyName, keyValue, description] of settings) {
                await db.query(`
                  INSERT INTO system_settings (key_name, key_value, description) 
                  VALUES ($1, $2, $3)
                  ON CONFLICT (key_name) DO UPDATE SET 
                    key_value = EXCLUDED.key_value,
                    updated_at = CURRENT_TIMESTAMP
                `, [keyName, keyValue, description]);
              }
              console.log('✅ System settings inserted');
              
              // 9. Final verification
              const keyCount = await db.query('SELECT COUNT(*) as count FROM license_keys');
              const tableCount = await db.query(`
                SELECT COUNT(*) as count 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name IN ('license_keys', 'auth_sessions', 'usage_logs', 'payments', 'system_settings')
              `);
              
              console.log(`✅ Tables created: ${tableCount.rows[0].count}/5`);
              console.log(`✅ Demo keys available: ${keyCount.rows[0].count}`);
              
              if (tableCount.rows[0].count == 5 && keyCount.rows[0].count > 0) {
                console.log('\n🎉 COMPLETE DATABASE SETUP SUCCESSFUL! 🎉');
                console.log('📱 Your Secret Messages app is now ready!');
                console.log('🧪 Test with demo key: SM001-ALPHA-BETA1');
                console.log('🔧 Admin panel: /admin');
                console.log('🔑 Generate new keys in admin panel');
              } else {
                throw new Error('Database setup verification failed');
              }
              
            } catch (error) {
              console.error('❌ Database setup failed:', error.message);
              console.error('🔍 Error details:', error);
              process.exit(1);
            } finally {
              await db.end();
            }
          }
          
          completeSetup();
          EOF
          
          node complete-setup.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: 🎉 Success Summary
        if: success()
        run: |
          echo "🎉 Complete Database Setup SUCCESSFUL!"
          echo ""
          echo "✅ All tables created:"
          echo "   - license_keys (with device_fingerprint)"
          echo "   - auth_sessions"
          echo "   - usage_logs"
          echo "   - payments"
          echo "   - system_settings"
          echo ""
          echo "✅ Demo keys ready:"
          echo "   - SM001-ALPHA-BETA1"
          echo "   - SM002-GAMMA-DELT2"
          echo "   - SM003-ECHO-FOXTR3"
          echo "   - SM004-HOTEL-INDI4"
          echo "   - SM005-JULIET-KILO5"
          echo ""
          echo "🧪 Next steps:"
          echo "   1. Test login with: SM001-ALPHA-BETA1"
          echo "   2. Access admin panel: /admin"
          echo "   3. Generate new license keys"
          echo "   4. Your app should work perfectly!"
          
      - name: ❌ Failure Information
        if: failure()
        run: |
          echo "❌ Database setup failed!"
          echo ""
          echo "🔍 Common issues:"
          echo "   1. DATABASE_URL secret not set correctly"
          echo "   2. Railway database not accessible"
          echo "   3. Connection permission issues"
          echo ""
          echo "💡 Solutions:"
          echo "   1. Check Railway connection URL"
          echo "   2. Verify DATABASE_URL secret in GitHub"
          echo "   3. Try Railway direct approach"
