# .github/workflows/ci-cd.yml - Complete CI/CD Pipeline
name: Secret Messages CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
      - 'feature/*'
      - 'hotfix/*'
  pull_request:
    branches: 
      - main
      - develop
  release:
    types: [published]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: secret-messages-backend
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  lint-and-test:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run Prettier check
        run: npm run format:check
        
      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          
      - name: Generate test coverage
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
          
      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          
      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup deployment tools
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          envsubst < k8s/staging/deployment.yaml | kubectl apply -f -
          kubectl rollout status deployment/secret-messages-staging -n staging
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
          
      - name: Run staging tests
        run: |
          npm run test:e2e:staging
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
          
      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: "Staging deployment completed for commit ${{ github.sha }}"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup deployment tools
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Blue-Green Deployment
        run: |
          export KUBECONFIG=kubeconfig
          
          # Create new deployment
          envsubst < k8s/production/deployment-green.yaml | kubectl apply -f -
          kubectl rollout status deployment/secret-messages-green -n production
          
          # Health check
          kubectl wait --for=condition=ready pod -l app=secret-messages,version=green -n production --timeout=300s
          
          # Switch traffic
          kubectl patch service secret-messages -n production -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait for traffic switch
          sleep 30
          
          # Remove old deployment
          kubectl delete deployment secret-messages-blue -n production --ignore-not-found=true
          
          # Rename green to blue for next deployment
          kubectl patch deployment secret-messages-green -n production -p '{"metadata":{"name":"secret-messages-blue"},"spec":{"selector":{"matchLabels":{"version":"blue"}},"template":{"metadata":{"labels":{"version":"blue"}}}}}'
          
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.PRODUCTION_STRIPE_SECRET_KEY }}
          
      - name: Run production smoke tests
        run: |
          npm run test:smoke:production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          
      - name: Create GitHub deployment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            
      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: "🚀 Production deployment completed! Version: ${{ github.event.release.tag_name }}"

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run load tests
        run: npm run test:load
        env:
          TARGET_URL: ${{ secrets.STAGING_URL }}
          
      - name: Generate performance report
        run: |
          mkdir -p reports
          npm run test:performance -- --reporter json > reports/performance.json
          
      - name: Upload performance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: reports/

# .github/workflows/security.yml - Dedicated Security Workflow
---
name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'secret-messages-backend'
          path: '.'
          format: 'ALL'
          
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-reports
          path: reports/

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: docker build -t secret-messages:security-scan .
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'secret-messages:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

# .github/workflows/backup.yml - Automated Backup Workflow
---
name: Database Backup

on:
  schedule:
    - cron: '0 3 * * *'  # Daily at 3 AM
  workflow_dispatch:

jobs:
  backup:
    name: Create Database Backup
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install postgresql-client
          
      - name: Create backup
        run: |
          pg_dump "${{ secrets.PRODUCTION_DATABASE_URL }}" > backup-$(date +%Y%m%d-%H%M%S).sql
          gzip backup-*.sql
          
      - name: Upload to S3
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          
      - name: Sync to S3
        run: |
          aws s3 cp backup-*.sql.gz s3://${{ secrets.BACKUP_BUCKET }}/database/
          
      - name: Cleanup old backups
        run: |
          aws s3 ls s3://${{ secrets.BACKUP_BUCKET }}/database/ | \
          head -n -30 | awk '{print $4}' | \
          xargs -I {} aws s3 rm s3://${{ secrets.BACKUP_BUCKET }}/database/{}

# .github/workflows/release.yml - Release Automation
---
name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this release
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Docker Images
            - `ghcr.io/${{ github.repository }}/secret-messages-backend:${{ github.ref_name }}`
            
            ## Deployment
            This release has been automatically deployed to production.
          draft: false
          prerelease: false

# .github/workflows/monitoring.yml - Monitoring and Alerts
---
name: System Monitoring

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:

jobs:
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Check production health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PRODUCTION_URL }}/api/health)
          if [ $response -ne 200 ]; then
            echo "Health check failed with status: $response"
            exit 1
          fi
          
      - name: Check staging health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.STAGING_URL }}/api/health)
          if [ $response -ne 200 ]; then
            echo "Staging health check failed with status: $response"
            exit 1
          fi
          
      - name: Alert on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: "🚨 Health check failed for Secret Messages!"

  ssl-check:
    name: SSL Certificate Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Check SSL certificate expiry
        run: |
          domain="${{ secrets.PRODUCTION_DOMAIN }}"
          expiry=$(echo | openssl s_client -servername $domain -connect $domain:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
          expiry_epoch=$(date -d "$expiry" +%s)
          current_epoch=$(date +%s)
          days_left=$(( ($expiry_epoch - $current_epoch) / 86400 ))
          
          if [ $days_left -lt 30 ]; then
            echo "SSL certificate expires in $days_left days!"
            exit 1
          fi
          
      - name: Alert on SSL expiry
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: "⚠️ SSL certificate for Secret Messages expires soon!"

# .github/dependabot.yml - Automated Dependency Updates
---
version: 2
updates:
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
      time: "09:00"
    open-pull-requests-limit: 10
    reviewers:
      - "security-team"
    assignees:
      - "dev-team"
    commit-message:
      prefix: "deps"
      include: "scope"
    
  - package-ecosystem: "docker"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "tuesday"
    open-pull-requests-limit: 5
    
  - package-ecosystem: "github-actions"
    directory: "/.github/workflows"
    schedule:
      interval: "monthly"
    open-pull-requests-limit: 5

# scripts/deploy-github-actions.sh - Setup Script for GitHub Actions
#!/bin/bash

echo "🚀 Setting up GitHub Actions for Secret Messages"

# Required secrets for GitHub Actions
required_secrets=(
    "CODECOV_TOKEN"
    "SONAR_TOKEN"
    "SNYK_TOKEN"
    "STAGING_URL"
    "STAGING_DATABASE_URL"
    "STAGING_KUBECONFIG"
    "STAGING_JWT_SECRET"
    "PRODUCTION_URL"
    "PRODUCTION_DATABASE_URL"
    "PRODUCTION_KUBECONFIG"
    "PRODUCTION_JWT_SECRET"
    "PRODUCTION_STRIPE_SECRET_KEY"
    "PRODUCTION_DOMAIN"
    "SLACK_WEBHOOK"
    "AWS_ACCESS_KEY_ID"
    "AWS_SECRET_ACCESS_KEY"
    "BACKUP_BUCKET"
)

echo "📋 Required GitHub Secrets:"
for secret in "${required_secrets[@]}"; do
    echo "  - $secret"
done

echo ""
echo "📝 Setup Instructions:"
echo "1. Go to your GitHub repository settings"
echo "2. Navigate to Secrets and Variables → Actions"
echo "3. Add all the required secrets listed above"
echo "4. Configure environments (staging, production) with protection rules"
echo "5. Enable branch protection for main and develop branches"
echo ""

echo "✅ GitHub Actions workflows are ready!"
echo "📍 Workflows location: .github/workflows/"
echo "🔧 Configure your secrets and environments to activate CI/CD"
