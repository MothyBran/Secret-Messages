name: 📱 Mobile Database Fix (Corrected)

on:
  push:
    paths:
      - 'database/migrations/002_fix_schema.sql'
  workflow_dispatch:  # Manual trigger button

jobs:
  fix-database:
    name: 🔧 Fix Database Schema
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 📦 Install Dependencies
        run: |
          npm install pg
          
      - name: 🔧 Apply Database Fix (Node.js)
        run: |
          cat > fix-db.js << 'EOF'
          const { Pool } = require('pg');
          
          async function fixDatabase() {
            console.log('🔧 Starting Database Fix...');
            
            const db = new Pool({
              connectionString: process.env.DATABASE_URL,
              ssl: process.env.DATABASE_URL.includes('localhost') ? false : { rejectUnauthorized: false }
            });
            
            try {
              // 1. Check connection
              await db.query('SELECT NOW()');
              console.log('✅ Database connection successful');
              
              // 2. Add missing column
              await db.query(`
                ALTER TABLE license_keys 
                ADD COLUMN IF NOT EXISTS device_fingerprint VARCHAR(255)
              `);
              console.log('✅ device_fingerprint column added');
              
              // 3. Create auth_sessions table
              await db.query(`
                CREATE TABLE IF NOT EXISTS auth_sessions (
                  id SERIAL PRIMARY KEY,
                  session_token VARCHAR(500) UNIQUE NOT NULL,
                  key_id INTEGER REFERENCES license_keys(id),
                  ip_address VARCHAR(45) NOT NULL,
                  device_fingerprint VARCHAR(255),
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  expires_at TIMESTAMP NOT NULL,
                  is_active BOOLEAN DEFAULT true,
                  last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
              `);
              console.log('✅ auth_sessions table created');
              
              // 4. Insert demo keys with proper hashes
              const demoKeys = [
                ['SM001-ALPHA-BETA1', '$2b$10$vI.n8gO7mK5rN3qP4sT6u.xY7zA8bC9dE0fG1hI2jK3lM4nO5pQ6r'],
                ['SM002-GAMMA-DELT2', '$2b$10$wJ.o9hP8nL6sO4rQ5tU7v.yZ8aB9cD0eF1gH2iJ3kL4mN5oP6qR7s'],
                ['SM003-ECHO-FOXTR3', '$2b$10$xK.p0iQ9oM7tP5sR6uV8w.zA9bC0dE1fG2hI3jK4lM5nO6pQ7rS8t']
              ];
              
              for (const [keyCode, keyHash] of demoKeys) {
                await db.query(`
                  INSERT INTO license_keys (key_code, key_hash, created_by, is_active) 
                  VALUES ($1, $2, 'mobile-fix', false)
                  ON CONFLICT (key_code) DO NOTHING
                `, [keyCode, keyHash]);
              }
              console.log('✅ Demo keys inserted');
              
              // 5. Create indexes
              await db.query('CREATE INDEX IF NOT EXISTS idx_license_keys_code ON license_keys(key_code)');
              await db.query('CREATE INDEX IF NOT EXISTS idx_license_keys_active ON license_keys(is_active)');
              await db.query('CREATE INDEX IF NOT EXISTS idx_auth_sessions_token ON auth_sessions(session_token)');
              console.log('✅ Indexes created');
              
              // 6. Test final state
              const result = await db.query('SELECT COUNT(*) as count FROM license_keys');
              const columnCheck = await db.query(`
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'license_keys' AND column_name = 'device_fingerprint'
              `);
              
              console.log(`✅ Total license keys: ${result.rows[0].count}`);
              console.log(`✅ device_fingerprint column exists: ${columnCheck.rows.length > 0 ? 'YES' : 'NO'}`);
              
              if (columnCheck.rows.length > 0 && result.rows[0].count > 0) {
                console.log('\n🎉 SUCCESS! Database fix completed successfully!');
                console.log('📱 Your license keys should now work properly!');
                console.log('🧪 Test with demo key: SM001-ALPHA-BETA1');
              } else {
                throw new Error('Database fix verification failed');
              }
              
            } catch (error) {
              console.error('❌ Database fix failed:', error.message);
              process.exit(1);
            } finally {
              await db.end();
            }
          }
          
          fixDatabase();
          EOF
          
          node fix-db.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: 🎉 Success Notification
        if: success()
        run: |
          echo "🎉 Database fix completed successfully!"
          echo "✅ License keys should now work in your app"
          echo "🧪 Test with: SM001-ALPHA-BETA1"
          
      - name: ❌ Failure Debug Info
        if: failure()
        run: |
          echo "❌ Database fix failed"
          echo "🔍 Common solutions:"
          echo "1. Check DATABASE_URL secret is set correctly"
          echo "2. Verify database is accessible"
          echo "3. Check Railway/Vercel database is running"
