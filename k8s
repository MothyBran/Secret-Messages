# k8s/namespace.yaml - Namespace Definition
apiVersion: v1
kind: Namespace
metadata:
  name: secret-messages
  labels:
    name: secret-messages
    environment: production

---
# k8s/configmap.yaml - Configuration Management
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-messages-config
  namespace: secret-messages
data:
  NODE_ENV: "production"
  PORT: "3000"
  FRONTEND_URL: "https://secretmessages.dev"
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  AUTH_RATE_LIMIT_MAX: "5"
  SESSION_DURATION_DAYS: "30"
  LOG_LEVEL: "info"
  CORS_ORIGIN: "https://secretmessages.dev"
  TRUST_PROXY: "true"

---
# k8s/secrets.yaml - Sensitive Configuration
apiVersion: v1
kind: Secret
metadata:
  name: secret-messages-secrets
  namespace: secret-messages
type: Opaque
data:
  # Base64 encoded values - replace with actual encoded secrets
  JWT_SECRET: "{{ JWT_SECRET_BASE64 }}"
  ADMIN_PASSWORD: "{{ ADMIN_PASSWORD_BASE64 }}"
  DB_PASSWORD: "{{ DB_PASSWORD_BASE64 }}"
  REDIS_PASSWORD: "{{ REDIS_PASSWORD_BASE64 }}"
  STRIPE_SECRET_KEY: "{{ STRIPE_SECRET_KEY_BASE64 }}"
  STRIPE_WEBHOOK_SECRET: "{{ STRIPE_WEBHOOK_SECRET_BASE64 }}"
  SMTP_USER: "{{ SMTP_USER_BASE64 }}"
  SMTP_PASS: "{{ SMTP_PASS_BASE64 }}"

---
# k8s/pvc.yaml - Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: secret-messages
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: secret-messages
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 5Gi

---
# k8s/postgres.yaml - PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: secret-messages
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "secretmessages"
        - name: POSTGRES_USER
          value: "secretmessages"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: secret-messages-secrets
              key: DB_PASSWORD
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - secretmessages
            - -d
            - secretmessages
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - secretmessages
            - -d
            - secretmessages
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: secret-messages
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres

---
# k8s/redis.yaml - Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: secret-messages
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - "$(REDIS_PASSWORD)"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: secret-messages-secrets
              key: REDIS_PASSWORD
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: secret-messages
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app: redis

---
# k8s/deployment.yaml - Main Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secret-messages-app
  namespace: secret-messages
  labels:
    app: secret-messages
    version: blue
spec:
  replicas: 3
  selector:
    matchLabels:
      app: secret-messages
      version: blue
  template:
    metadata:
      labels:
        app: secret-messages
        version: blue
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres -p 5432 -U secretmessages; do
            echo "Waiting for postgres..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis -p 6379 ping; do
            echo "Waiting for redis..."
            sleep 2
          done
          echo "Redis is ready!"
      containers:
      - name: secret-messages
        image: ghcr.io/yourusername/secret-messages-backend:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: DATABASE_URL
          value: "postgresql://secretmessages:$(DB_PASSWORD)@postgres:5432/secretmessages"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379"
        envFrom:
        - configMapRef:
            name: secret-messages-config
        - secretRef:
            name: secret-messages-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - secret-messages
              topologyKey: kubernetes.io/hostname

---
# k8s/service.yaml - Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: secret-messages-service
  namespace: secret-messages
  labels:
    app: secret-messages
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: secret-messages

---
# k8s/ingress.yaml - Ingress Controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: secret-messages-ingress
  namespace: secret-messages
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/limit-connections: "10"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
spec:
  tls:
  - hosts:
    - secretmessages.dev
    - www.secretmessages.dev
    secretName: secret-messages-tls
  rules:
  - host: secretmessages.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: secret-messages-service
            port:
              number: 80
  - host: www.secretmessages.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: secret-messages-service
            port:
              number: 80

---
# k8s/hpa.yaml - Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: secret-messages-hpa
  namespace: secret-messages
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: secret-messages-app
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
# k8s/network-policy.yaml - Network Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secret-messages-network-policy
  namespace: secret-messages
spec:
  podSelector:
    matchLabels:
      app: secret-messages
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 587

---
# k8s/pod-disruption-budget.yaml - High Availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: secret-messages-pdb
  namespace: secret-messages
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: secret-messages

---
# k8s/monitoring.yaml - Monitoring Setup
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: secret-messages-metrics
  namespace: secret-messages
  labels:
    app: secret-messages
spec:
  selector:
    matchLabels:
      app: secret-messages
  endpoints:
  - port: http
    path: /metrics
    interval: 30s

---
# k8s/cronjob-backup.yaml - Automated Backups
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: secret-messages
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            command:
            - /bin/bash
            - -c
            - |
              BACKUP_FILE="/backups/backup-$(date +%Y%m%d-%H%M%S).sql"
              pg_dump postgresql://secretmessages:$DB_PASSWORD@postgres:5432/secretmessages > $BACKUP_FILE
              gzip $BACKUP_FILE
              
              # Upload to S3 (if configured)
              if [ ! -z "$AWS_ACCESS_KEY_ID" ]; then
                aws s3 cp $BACKUP_FILE.gz s3://$BACKUP_BUCKET/database/
              fi
              
              # Cleanup old backups (keep last 30 days)
              find /backups -name "backup-*.sql.gz" -mtime +30 -delete
            env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secret-messages-secrets
                  key: DB_PASSWORD
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: secret-messages-secrets
                  key: AWS_ACCESS_KEY_ID
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: secret-messages-secrets
                  key: AWS_SECRET_ACCESS_KEY
                  optional: true
            - name: BACKUP_BUCKET
              value: "secret-messages-backups"
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-pvc
          restartPolicy: OnFailure

---
# k8s/backup-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-pvc
  namespace: secret-messages
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 50Gi

---
# k8s/staging/namespace.yaml - Staging Environment
apiVersion: v1
kind: Namespace
metadata:
  name: secret-messages-staging
  labels:
    name: secret-messages-staging
    environment: staging

---
# k8s/staging/deployment.yaml - Staging Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secret-messages-staging
  namespace: secret-messages-staging
  labels:
    app: secret-messages
    environment: staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: secret-messages
      environment: staging
  template:
    metadata:
      labels:
        app: secret-messages
        environment: staging
    spec:
      containers:
      - name: secret-messages
        image: ghcr.io/yourusername/secret-messages-backend:develop
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "staging"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: staging-secrets
              key: DATABASE_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: staging-secrets
              key: JWT_SECRET
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# k8s/staging/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: secret-messages-staging-service
  namespace: secret-messages-staging
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: secret-messages
    environment: staging

---
# k8s/staging/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: secret-messages-staging-ingress
  namespace: secret-messages-staging
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
spec:
  tls:
  - hosts:
    - staging.secretmessages.dev
    secretName: staging-secret-messages-tls
  rules:
  - host: staging.secretmessages.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: secret-messages-staging-service
            port:
              number: 80
