# monitoring/prometheus.yml - Prometheus Configuration
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'secret-messages'
    environment: 'production'

rule_files:
  - "alert_rules.yml"
  - "recording_rules.yml"

scrape_configs:
  # Application Metrics
  - job_name: 'secret-messages-app'
    static_configs:
      - targets: ['secret-messages-service:80']
    metrics_path: /metrics
    scrape_interval: 30s
    scrape_timeout: 10s
    
  # Database Metrics
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres:5432']
    metrics_path: /metrics
    
  # Redis Metrics
  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
    metrics_path: /metrics
    
  # Nginx Metrics
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx:80']
    metrics_path: /nginx_status
    
  # Node Exporter
  - job_name: 'node-exporter'
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      - source_labels: [__address__]
        regex: '(.*):10250'
        target_label: __address__
        replacement: '${1}:9100'
        
  # Kubernetes API Server
  - job_name: 'kubernetes-apiserver'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - default
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
        
  # Application Pods
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# monitoring/alert_rules.yml - Alerting Rules
groups:
  - name: secret-messages-alerts
    rules:
      # High Error Rate
      - alert: HighErrorRate
        expr: |
          (
            rate(http_requests_total{status=~"5.."}[5m]) /
            rate(http_requests_total[5m])
          ) > 0.05
        for: 5m
        labels:
          severity: warning
          service: secret-messages
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value | humanizePercentage }} for {{ $labels.instance }}"
          
      # Application Down
      - alert: ApplicationDown
        expr: up{job="secret-messages-app"} == 0
        for: 1m
        labels:
          severity: critical
          service: secret-messages
        annotations:
          summary: "Secret Messages application is down"
          description: "The Secret Messages application has been down for more than 1 minute"
          
      # Database Connection Issues
      - alert: DatabaseConnectionHigh
        expr: |
          pg_stat_activity_count{datname="secretmessages", state="active"} > 80
        for: 5m
        labels:
          severity: warning
          service: postgres
        annotations:
          summary: "High database connections"
          description: "Database has {{ $value }} active connections"
          
      # High Memory Usage
      - alert: HighMemoryUsage
        expr: |
          (
            container_memory_working_set_bytes{container="secret-messages"} /
            container_spec_memory_limit_bytes{container="secret-messages"}
          ) > 0.8
        for: 5m
        labels:
          severity: warning
          service: secret-messages
        annotations:
          summary: "High memory usage"
          description: "Container memory usage is above 80%: {{ $value | humanizePercentage }}"
          
      # High CPU Usage
      - alert: HighCPUUsage
        expr: |
          rate(container_cpu_usage_seconds_total{container="secret-messages"}[5m]) > 0.8
        for: 5m
        labels:
          severity: warning
          service: secret-messages
        annotations:
          summary: "High CPU usage"
          description: "Container CPU usage is above 80%: {{ $value | humanizePercentage }}"
          
      # Disk Space Low
      - alert: DiskSpaceLow
        expr: |
          (
            node_filesystem_avail_bytes{mountpoint="/"} /
            node_filesystem_size_bytes{mountpoint="/"}
          ) < 0.1
        for: 5m
        labels:
          severity: critical
          service: infrastructure
        annotations:
          summary: "Low disk space"
          description: "Disk space is below 10%: {{ $value | humanizePercentage }} remaining"
          
      # Redis Down
      - alert: RedisDown
        expr: up{job="redis"} == 0
        for: 1m
        labels:
          severity: critical
          service: redis
        annotations:
          summary: "Redis is down"
          description: "Redis has been down for more than 1 minute"
          
      # SSL Certificate Expiry
      - alert: SSLCertificateExpiry
        expr: |
          probe_ssl_earliest_cert_expiry - time() < 86400 * 30
        for: 1h
        labels:
          severity: warning
          service: ssl
        annotations:
          summary: "SSL certificate expires soon"
          description: "SSL certificate expires in {{ $value | humanizeDuration }}"
          
      # Too Many Failed Login Attempts
      - alert: TooManyFailedLogins
        expr: |
          increase(failed_login_attempts_total[5m]) > 20
        for: 1m
        labels:
          severity: warning
          service: security
        annotations:
          summary: "Too many failed login attempts"
          description: "{{ $value }} failed login attempts in the last 5 minutes"
          
      # Payment Processing Issues
      - alert: PaymentProcessingErrors
        expr: |
          increase(payment_errors_total[5m]) > 3
        for: 1m
        labels:
          severity: critical
          service: payments
        annotations:
          summary: "Payment processing errors"
          description: "{{ $value }} payment errors in the last 5 minutes"

  - name: infrastructure-alerts
    rules:
      # Node Down
      - alert: NodeDown
        expr: up{job="node-exporter"} == 0
        for: 5m
        labels:
          severity: critical
          service: infrastructure
        annotations:
          summary: "Node is down"
          description: "Node {{ $labels.instance }} has been down for more than 5 minutes"
          
      # Pod Restart Loop
      - alert: PodRestartLoop
        expr: |
          increase(kube_pod_container_status_restarts_total[15m]) > 5
        for: 5m
        labels:
          severity: warning
          service: kubernetes
        annotations:
          summary: "Pod restart loop detected"
          description: "Pod {{ $labels.pod }} is restarting frequently"

# monitoring/recording_rules.yml - Recording Rules for Performance
groups:
  - name: secret-messages-recording
    interval: 30s
    rules:
      # Request Rate
      - record: secret_messages:http_requests_rate5m
        expr: |
          rate(http_requests_total{job="secret-messages-app"}[5m])
          
      # Error Rate
      - record: secret_messages:http_error_rate5m
        expr: |
          rate(http_requests_total{job="secret-messages-app", status=~"5.."}[5m]) /
          rate(http_requests_total{job="secret-messages-app"}[5m])
          
      # Response Time P95
      - record: secret_messages:http_request_duration_p95
        expr: |
          histogram_quantile(0.95, 
            rate(http_request_duration_seconds_bucket{job="secret-messages-app"}[5m])
          )
          
      # Database Connection Pool Usage
      - record: secret_messages:db_connection_pool_usage
        expr: |
          pg_stat_activity_count{datname="secretmessages", state="active"} /
          pg_settings_max_connections
          
      # Active Users (approximation)
      - record: secret_messages:active_users_5m
        expr: |
          count by (instance) (
            increase(http_requests_total{job="secret-messages-app", endpoint="/api/auth/validate"}[5m]) > 0
          )

---
# monitoring/grafana/dashboards/secret-messages-overview.json
{
  "dashboard": {
    "id": null,
    "title": "Secret Messages - Application Overview",
    "tags": ["secret-messages"],
    "timezone": "UTC",
    "refresh": "30s",
    "time": {
      "from": "now-1h",
      "to": "now"
    },
    "panels": [
      {
        "id": 1,
        "title": "Request Rate",
        "type": "stat",
        "targets": [
          {
            "expr": "sum(secret_messages:http_requests_rate5m)",
            "legendFormat": "Requests/sec"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "unit": "reqps",
            "min": 0
          }
        },
        "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
      },
      {
        "id": 2,
        "title": "Error Rate",
        "type": "stat",
        "targets": [
          {
            "expr": "sum(secret_messages:http_error_rate5m) * 100",
            "legendFormat": "Error %"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "unit": "percent",
            "min": 0,
            "max": 100,
            "thresholds": {
              "steps": [
                {"color": "green", "value": 0},
                {"color": "yellow", "value": 1},
                {"color": "red", "value": 5}
              ]
            }
          }
        },
        "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
      },
      {
        "id": 3,
        "title": "Response Time (P95)",
        "type": "stat",
        "targets": [
          {
            "expr": "secret_messages:http_request_duration_p95 * 1000",
            "legendFormat": "P95 Latency"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "unit": "ms",
            "min": 0,
            "thresholds": {
              "steps": [
                {"color": "green", "value": 0},
                {"color": "yellow", "value": 500},
                {"color": "red", "value": 1000}
              ]
            }
          }
        },
        "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
      },
      {
        "id": 4,
        "title": "Active Users",
        "type": "stat",
        "targets": [
          {
            "expr": "sum(secret_messages:active_users_5m)",
            "legendFormat": "Active Users"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "unit": "short",
            "min": 0
          }
        },
        "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
      },
      {
        "id": 5,
        "title": "Request Rate Over Time",
        "type": "timeseries",
        "targets": [
          {
            "expr": "sum by (method, status) (secret_messages:http_requests_rate5m)",
            "legendFormat": "{{method}} {{status}}"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "unit": "reqps"
          }
        },
        "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
      },
      {
        "id": 6,
        "title": "Response Time Percentiles",
        "type": "timeseries",
        "targets": [
          {
            "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket{job=\"secret-messages-app\"}[5m])) * 1000",
            "legendFormat": "P50"
          },
          {
            "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"secret-messages-app\"}[5m])) * 1000",
            "legendFormat": "P95"
          },
          {
            "expr": "histogram_quantile(0.99, rate(http_request_duration_seconds_bucket{job=\"secret-messages-app\"}[5m])) * 1000",
            "legendFormat": "P99"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "unit": "ms"
          }
        },
        "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
      },
      {
        "id": 7,
        "title": "Database Connections",
        "type": "timeseries",
        "targets": [
          {
            "expr": "pg_stat_activity_count{datname=\"secretmessages\", state=\"active\"}",
            "legendFormat": "Active Connections"
          },
          {
            "expr": "pg_settings_max_connections",
            "legendFormat": "Max Connections"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "unit": "short"
          }
        },
        "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
      },
      {
        "id": 8,
        "title": "Memory Usage",
        "type": "timeseries",
        "targets": [
          {
            "expr": "container_memory_working_set_bytes{container=\"secret-messages\"} / 1024 / 1024",
            "legendFormat": "Memory Usage (MB)"
          },
          {
            "expr": "container_spec_memory_limit_bytes{container=\"secret-messages\"} / 1024 / 1024",
            "legendFormat": "Memory Limit (MB)"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "unit": "decbytes"
          }
        },
        "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
      }
    ]
  }
}

---
# monitoring/grafana/dashboards/secret-messages-security.json
{
  "dashboard": {
    "id": null,
    "title": "Secret Messages - Security Dashboard",
    "tags": ["secret-messages", "security"],
    "timezone": "UTC",
    "refresh": "1m",
    "time": {
      "from": "now-24h",
      "to": "now"
    },
    "panels": [
      {
        "id": 1,
        "title": "Failed Login Attempts",
        "type": "timeseries",
        "targets": [
          {
            "expr": "increase(failed_login_attempts_total[5m])",
            "legendFormat": "Failed Logins (5m)"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "unit": "short",
            "thresholds": {
              "steps": [
                {"color": "green", "value": 0},
                {"color": "yellow", "value": 10},
                {"color": "red", "value": 20}
              ]
            }
          }
        },
        "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
      },
      {
        "id": 2,
        "title": "Authentication Success Rate",
        "type": "stat",
        "targets": [
          {
            "expr": "rate(successful_login_attempts_total[5m]) / (rate(successful_login_attempts_total[5m]) + rate(failed_login_attempts_total[5m])) * 100",
            "legendFormat": "Success Rate"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "unit": "percent",
            "min": 0,
            "max": 100,
            "thresholds": {
              "steps": [
                {"color": "red", "value": 0},
                {"color": "yellow", "value": 80},
                {"color": "green", "value": 95}
              ]
            }
          }
        },
        "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
      },
      {
        "id": 3,
        "title": "Active Sessions",
        "type": "stat",
        "targets": [
          {
            "expr": "active_sessions_total",
            "legendFormat": "Active Sessions"
          }
        ],
        "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
      },
      {
        "id": 4,
        "title": "License Key Usage",
        "type": "timeseries",
        "targets": [
          {
            "expr": "increase(license_key_activations_total[1h])",
            "legendFormat": "Key Activations"
          },
          {
            "expr": "license_keys_total - license_keys_used_total",
            "legendFormat": "Available Keys"
          }
        ],
        "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
      },
      {
        "id": 5,
        "title": "Payment Security Events",
        "type": "timeseries",
        "targets": [
          {
            "expr": "increase(payment_fraud_attempts_total[5m])",
            "legendFormat": "Fraud Attempts"
          },
          {
            "expr": "increase(payment_errors_total[5m])",
            "legendFormat": "Payment Errors"
          }
        ],
        "fieldConfig": {
          "defaults": {
            "thresholds": {
              "steps": [
                {"color": "green", "value": 0},
                {"color": "red", "value": 1}
              ]
            }
          }
        },
        "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
      }
    ]
  }
}

---
# monitoring/prometheus-rules.yaml - Kubernetes PrometheusRule
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: secret-messages-rules
  namespace: secret-messages
  labels:
    app: secret-messages
    prometheus: kube-prometheus
    role: alert-rules
spec:
  groups:
  - name: secret-messages.rules
    interval: 30s
    rules:
    - alert: SecretMessagesDown
      expr: up{job="secret-messages-app"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Secret Messages application is down"
        description: "The Secret Messages application {{ $labels.instance }} has been down for more than 1 minute."
        
    - alert: HighErrorRate
      expr: |
        (
          rate(http_requests_total{job="secret-messages-app",status=~"5.."}[5m]) /
          rate(http_requests_total{job="secret-messages-app"}[5m])
        ) > 0.05
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High error rate"
        description: "Error rate is {{ $value | humanizePercentage }} for {{ $labels.instance }}"
        
    - alert: DatabaseConnectionsHigh
      expr: |
        pg_stat_activity_count{datname="secretmessages"} > 50
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High database connections"
        description: "Database has {{ $value }} active connections"

---
# monitoring/servicemonitor.yaml - ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: secret-messages-metrics
  namespace: secret-messages
  labels:
    app: secret-messages
spec:
  selector:
    matchLabels:
      app: secret-messages
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# monitoring/grafana-datasource.yaml - Grafana DataSource
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  prometheus.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-server:80
      isDefault: true
      editable: true

---
# monitoring/alertmanager.yml - AlertManager Configuration
global:
  smtp_smarthost: 'smtp.gmail.com:587'
  smtp_from: 'alerts@secretmessages.dev'
  smtp_auth_username: 'alerts@secretmessages.dev'
  smtp_auth_password: 'smtp-password'

route:
  group_by: ['alertname', 'cluster', 'service']
  group_wait: 10s
  group_interval: 10s
  repeat_interval: 1h
  receiver: 'default'
  routes:
  - match:
      severity: critical
    receiver: 'critical-alerts'
  - match:
      service: security
    receiver: 'security-alerts'

receivers:
- name: 'default'
  email_configs:
  - to: 'devops@secretmessages.dev'
    subject: '[{{ .Status | toUpper }}] {{ .GroupLabels.alertname }}'
    body: |
      {{ range .Alerts }}
      Alert: {{ .Annotations.summary }}
      Description: {{ .Annotations.description }}
      Instance: {{ .Labels.instance }}
      Severity: {{ .Labels.severity }}
      {{ end }}

- name: 'critical-alerts'
  email_configs:
  - to: 'critical@secretmessages.dev'
    subject: '[CRITICAL] {{ .GroupLabels.alertname }}'
    body: |
      CRITICAL ALERT TRIGGERED
      
      {{ range .Alerts }}
      Alert: {{ .Annotations.summary }}
      Description: {{ .Annotations.description }}
      Instance: {{ .Labels.instance }}
      Time: {{ .StartsAt }}
      {{ end }}
  slack_configs:
  - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
    channel: '#critical-alerts'
    title: 'Critical Alert: {{ .GroupLabels.alertname }}'
    text: |
      {{ range .Alerts }}
      {{ .Annotations.summary }}
      {{ .Annotations.description }}
      {{ end }}

- name: 'security-alerts'
  email_configs:
  - to: 'security@secretmessages.dev'
    subject: '[SECURITY] {{ .GroupLabels.alertname }}'
    body: |
      SECURITY ALERT
      
      {{ range .Alerts }}
      Alert: {{ .Annotations.summary }}
      Description: {{ .Annotations.description }}
      Instance: {{ .Labels.instance }}
      {{ end }}

inhibit_rules:
- source_match:
    severity: 'critical'
  target_match:
    severity: 'warning'
  equal: ['alertname', 'cluster', 'service']

---
# monitoring/node-exporter.yaml - Node Exporter DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    app: node-exporter
spec:
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
    spec:
      hostPID: true
      hostIPC: true
      hostNetwork: true
      containers:
      - name: node-exporter
        image: prom/node-exporter:latest
        ports:
        - containerPort: 9100
          hostPort: 9100
          name: metrics
        args:
          - '--path.procfs=/host/proc'
          - '--path.sysfs=/host/sys'
          - '--path.rootfs=/host/root'
          - '--collector.filesystem.ignored-mount-points'
          - '^/(dev|proc|sys|var/lib/docker/.+)($|/)'
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: root
          mountPath: /host/root
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: root
        hostPath:
          path: /
      tolerations:
      - operator: Exists
